1 1 1 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.065899s
1 1 1 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.063876s
1 1 1 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.059151s
1 1 1 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.058556s
1 1 1 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.065877s
1 1 18 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.061455s
1 1 18 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.057153s
1 1 18 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.062961s
1 1 18 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.057896s
1 1 18 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.058461s
1 1 35 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.057218s
1 1 35 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.060121s
1 1 35 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.059s
1 1 35 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.055718s
1 1 35 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.06984s
1 1 52 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.076908s
1 1 52 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.062126s
1 1 52 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.060982s
1 1 52 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.057723s
1 1 52 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.058122s
1 1 69 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.060137s
1 1 69 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.062905s
1 1 69 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.062822s
1 1 69 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.062818s
1 1 69 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.061799s
1 1 86 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.069763s
1 1 86 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.061526s
1 1 86 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.05975s
1 1 86 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.063344s
1 1 86 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.058998s
1 14 1 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.061399s
1 14 1 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.064155s
1 14 1 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.061731s
1 14 1 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.063242s
1 14 1 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.059877s
1 14 18 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.061173s
1 14 18 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.061767s
1 14 18 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.058823s
1 14 18 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.061097s
1 14 18 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.056016s
1 14 35 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.059786s
1 14 35 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.061232s
1 14 35 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.064433s
1 14 35 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.058663s
1 14 35 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.058007s
1 14 52 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.064865s
1 14 52 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.063093s
1 14 52 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.065242s
1 14 52 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.066042s
1 14 52 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.032275s
1 14 69 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.409521s
1 14 69 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.066822s
1 14 69 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.066304s
1 14 69 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.050175s
1 14 69 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.042531s
1 14 86 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.461071s
1 14 86 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.071091s
1 14 86 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.116341s
1 14 86 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.058547s
1 14 86 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.04706s
1 27 1 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.532343s
1 27 1 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.06865s
1 27 1 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.068109s
1 27 1 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.18066s
1 27 1 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.066624s
1 27 18 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.062674s
1 27 18 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.079191s
1 27 18 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.165396s
1 27 18 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.136149s
1 27 18 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.184683s
1 27 35 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.423903s
1 27 35 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.14431s
1 27 35 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.180716s
1 27 35 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.136193s
1 27 35 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.070325s
1 27 52 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.61792s
1 27 52 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.168571s
1 27 52 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.113239s
1 27 52 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.071138s
1 27 52 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.04819s
1 27 69 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.65555s
1 27 69 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.271309s
1 27 69 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.093987s
1 27 69 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.061948s
1 27 69 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.0557s
1 27 86 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.921353s
1 27 86 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.24809s
1 27 86 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.146175s
1 27 86 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.124781s
1 27 86 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.094941s
1 40 1 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 1.0648s
1 40 1 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.339937s
1 40 1 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.361122s
1 40 1 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.359034s
1 40 1 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.337884s
1 40 18 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.599567s
1 40 18 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.330946s
1 40 18 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.346042s
1 40 18 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.339022s
1 40 18 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.255681s
1 40 35 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.768054s
1 40 35 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.301883s
1 40 35 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.285906s
1 40 35 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.227837s
1 40 35 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.189035s
1 40 52 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.887872s
1 40 52 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.310608s
1 40 52 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.241681s
1 40 52 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.157775s
1 40 52 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.087887s
1 40 69 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 1.06531s
1 40 69 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.250395s
1 40 69 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.210331s
1 40 69 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.093331s
1 40 69 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.125499s
1 40 86 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 1.38935s
1 40 86 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.530367s
1 40 86 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.234914s
1 40 86 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 5.59624s
1 40 86 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.143935s
1 53 1 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 1.63077s
1 53 1 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.549253s
1 53 1 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.504848s
1 53 1 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.521746s
1 53 1 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.499642s
1 53 18 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.819371s
1 53 18 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.457942s
1 53 18 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.375585s
1 53 18 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.45016s
1 53 18 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.34707s
1 53 35 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 1.13779s
1 53 35 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.473686s
1 53 35 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.485354s
1 53 35 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.407131s
1 53 35 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.301486s
1 53 52 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 1.2819s
1 53 52 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.431269s
1 53 52 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.41616s
1 53 52 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.309809s
1 53 52 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.187412s
1 53 69 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 1.53748s
1 53 69 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.469459s
1 53 69 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.277612s
1 53 69 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.179512s
1 53 69 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.105485s
1 53 86 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 1.81434s
1 53 86 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.460504s
1 53 86 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.309102s
1 53 86 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.190509s
1 53 86 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.185762s
1 66 1 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 2.16863s
1 66 1 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.762148s
1 66 1 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.695694s
1 66 1 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.705238s
1 66 1 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.641548s
1 66 18 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 1.07788s
1 66 18 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.557071s
1 66 18 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.552081s
1 66 18 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.511271s
1 66 18 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.525393s
1 66 35 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 1.57232s
1 66 35 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 1.27002s
1 66 35 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.836269s
1 66 35 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.606035s
1 66 35 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.670298s
1 66 52 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 1.70906s
1 66 52 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 1.0881s
1 66 52 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.540362s
1 66 52 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 5.81917s
1 66 52 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.302738s
1 66 69 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 2.0064s
1 66 69 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.544999s
1 66 69 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.416654s
1 66 69 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.298342s
1 66 69 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.111883s
1 66 86 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 2.23787s
1 66 86 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.553789s
1 66 86 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.43828s
1 66 86 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.109422s
1 66 86 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.204836s
1 79 1 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 2.72708s
1 79 1 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.903706s
1 79 1 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.840833s
1 79 1 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.793288s
1 79 1 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.801084s
1 79 18 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 1.30694s
1 79 18 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.717537s
1 79 18 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.724575s
1 79 18 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.645419s
1 79 18 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.653815s
1 79 35 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 1.92289s
1 79 35 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.744719s
1 79 35 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.610765s
1 79 35 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.59944s
1 79 35 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.560371s
1 79 52 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 1.79087s
1 79 52 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.664824s
1 79 52 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.654939s
1 79 52 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.521769s
1 79 52 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.340845s
1 79 69 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 2.92556s
1 79 69 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.697343s
1 79 69 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.540318s
1 79 69 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.414523s
1 79 69 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.219504s
1 79 86 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 2.8016s
1 79 86 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.696167s
1 79 86 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.509328s
1 79 86 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 11.028s
1 79 86 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.24621s
1 92 1 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 3.28629s
1 92 1 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 1.0329s
1 92 1 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.994206s
1 92 1 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 1.03626s
1 92 1 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.995009s
1 92 18 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 1.66597s
1 92 18 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.949448s
1 92 18 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.913081s
1 92 18 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.8258s
1 92 18 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.719192s
1 92 35 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 2.35625s
1 92 35 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.900664s
1 92 35 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.793507s
1 92 35 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.714229s
1 92 35 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.639387s
1 92 52 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 2.08688s
1 92 52 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.813496s
1 92 52 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.771217s
1 92 52 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.663637s
1 92 52 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.422855s
1 92 69 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 3.59386s
1 92 69 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.792303s
1 92 69 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.64548s
1 92 69 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.445384s
1 92 69 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.313198s
1 92 86 1
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 3.2203s
1 92 86 24
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.829419s
1 92 86 47
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.496644s
1 92 86 70
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.28202s
1 92 86 93
===== Z3_PROVER =====
(declare-fun upsampling_prec () (_ BitVec 64))
(declare-fun upsampling_0 () (_ BitVec 64))
(declare-fun a_prec () (_ BitVec 64))
(declare-fun a_0 () (_ BitVec 64))
(assert (let ((a!1 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!2 (bvsle a_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff a_prec)))))
      (a!3 (bvadd #x0000000000000001
                  (bvmul #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec)))))
      (a!4 (bvsle upsampling_0
                  (bvadd #xffffffffffffffff
                         (bvshl #x0000000000000001
                                (bvadd #xffffffffffffffff upsampling_prec))))))
(let ((a!5 (or (not (and (bvsle a!1 a_0)
                         a!2
                         (bvsle #x0000000000000001 a_prec)
                         (bvsle a_prec #x0000000000000020)
                         (= upsampling_0 a_0)
                         (= upsampling_prec a_prec)
                         (bvsle #x0000000000000001 upsampling_prec)
                         (bvsle upsampling_prec #x0000000000000020)))
               (and (bvsle a!3 upsampling_0) a!4))))
  (not a!5))))
===== END =====

The model is deterministic
Time: 0.278239s
